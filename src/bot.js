import dotenv from 'dotenv'
import { Telegraf, Markup, Scenes, session } from 'telegraf'
import { registrationScene } from './controllers/registerScene.js'
import { changePrefsScene } from './controllers/changePrefsScene.js'
import { User } from './User.js'
import { userServiceInst } from './services/UserServices.js'
import { pairGenerator } from './controllers/pairGenerator.js'
import { db } from '../db/db.js'

dotenv.config()
const bot = new Telegraf(process.env.BOT_TOKEN)

const commands = `
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–π–Ω–æ–º —Å–∞–Ω—Ç–µ.
/set_prefs - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è.
/profile_info - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è.
/get_pair - —É–∑–Ω–∞—Ç—å –ø–∞—Ä—É.
 `

//  —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞

bot.start((ctx) => {
  const keyboard = Markup.keyboard([
    ['–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', '–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è'],
    ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è'],
    ['–£–∑–Ω–∞—Ç—å –º–æ—é –ø–∞—Ä—É']
  ]).resize()

  const firstName = ctx.message?.from?.first_name ?? '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü'

  ctx.reply(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}. 
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    keyboard
  )
})

// –≤—ã–∑–æ–≤ –ø–æ–¥—Å–∫–∞–∑–∫–∏

bot.help((ctx) => ctx.reply(commands))
bot.hears('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', (ctx) => {
  bot.help(ctx.reply(commands))
})

// —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

const stage = new Scenes.Stage([registrationScene, changePrefsScene])
bot.use(session())
bot.use(stage.middleware())

bot.hears(/^(–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è|\/register)$/i, (ctx) => ctx.scene.enter('registration'))

// —Å–º–µ–Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π

bot.hears(/^(–ò–∑–º–µ–Ω–∏—Ç—å|\/set_prefs)\s–ø–æ–∂–µ–ª–∞–Ω–∏—è$/i, (ctx) => ctx.scene.enter('changePrefs'))

// –∏–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

bot.hears(/^(–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è|\/profile_info)$/i, async (ctx) => {
  try {
    const id = ctx.message.from.id
    if (await userServiceInst.checkAuth(id)) {
      const userDb = await db('users').where('telegram_id', id).first()
      const userInfo = User.deserializeFromDb(userDb)
      ctx.reply(`–ò–º—è: ${userInfo.name}.
–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${userInfo.preferences}.
      `)
    } else {
      ctx.reply(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.`)
    }
  } catch {
    ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`)
  }
})

// —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –ø–∞—Ä—É

bot.hears(/^(\/get_pair|–£–∑–Ω–∞—Ç—å –º–æ—é –ø–∞—Ä—É)$/i, async (ctx) => {
  try {
    const id = ctx.message.from.id
    if (await userServiceInst.checkAuth(id)) {
      if (await userServiceInst.checkPairExist(id)) {
        const userDb = await db('users').where('telegram_id', id).first()
        const pairName = userDb.pair_name
        const userPairDb = await db('users').where('name', pairName).first()
        const pairPreferences = userPairDb.preferences
        ctx.reply(`–ò–º—è –ø–∞—Ä—ã: ${userDb.pair_name}.
–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${pairPreferences}.`)
      } else {
        ctx.reply(`–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–∞—Ä—ã.`)
      }
    } else {
      ctx.reply(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.`)
    }
  } catch {
    ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä—ã.`)
  }
})

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è

bot.action('btn_1', async (ctx) => {
  try {
    await ctx.answerCbQuery()
    ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`)
    return ctx.scene.leave()
  } catch (e) {
    console.log(e)
  }
})

// –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

bot.on('text', (ctx) => {
  ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–∞–ª–µ–Ω—å–∫–∏–π, –∏ —Ç–æ–∫–æ–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é üëâüèªüëàüèª')
})

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))

const test = async () => {
  const users = [
    {
      name: '–°–∞–Ω—è',
      preferences: 'Preferences1',
      email: 'user1@example.com',
      telegram_login: 'user1',
      telegram_id: '123456',
      pair_name: ''
    },
    {
      name: '–î–∞–≤',
      preferences: 'Preferences2',
      email: 'user2@example.com',
      telegram_login: 'user2',
      telegram_id: '789012',
      pair_name: ''
    },
    {
      name: '–ñ–µ–∫–∞',
      preferences: 'Preferences1',
      email: 'user1@example.com',
      telegram_login: 'user1',
      telegram_id: '123456',
      pair_name: ''
    },
    {
      name: '–î—Ä—é—Å',
      preferences: 'Preferences2',
      email: 'user2@example.com',
      telegram_login: 'user2',
      telegram_id: '789012',
      pair_name: ''
    },
    {
      name: '–ö–∞—Ç—è',
      preferences: 'Preferences1',
      email: 'user1@example.com',
      telegram_login: 'user1',
      telegram_id: '123456',
      pair_name: ''
    },
    {
      name: '–ù–µ–∫–∏—Ç',
      preferences: 'Preferences2',
      email: 'user2@example.com',
      telegram_login: 'user2',
      telegram_id: '789012',
      pair_name: ''
    },
    {
      name: '–ù–∞—Å—Ç—è',
      preferences: 'Preferences2',
      email: 'user2@example.com',
      telegram_login: 'user2',
      telegram_id: '789012',
      pair_name: ''
    },
    {
      name: '–ï–≥–æ—Ä',
      preferences: 'Preferences1',
      email: 'user1@example.com',
      telegram_login: 'user1',
      telegram_id: '123456',
      pair_name: ''
    },
    {
      name: '–ö—Å—é—à–∞',
      preferences: 'Preferences2',
      email: 'user2@example.com',
      telegram_login: 'user2',
      telegram_id: '789012',
      pair_name: ''
    }
  ]

  try {
    const tableExists = await db.schema.hasTable('users')

    if (tableExists) {
      for (const user of users) {
        await db('users').insert(user)
      }

      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    } else {
      console.log('–¢–∞–±–ª–∏—Ü–∞ "users" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error)
  }
}

// test()

// pairGenerator()

// clearDatabase()
